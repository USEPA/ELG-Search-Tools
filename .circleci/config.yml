version: 2
jobs:
  develop-branch:
    docker:
      - image: circleci/node:dubnium-stretch
    environment:
      APP_NAME: elg-search-tools-dev
      APP_DOMAIN: app.cloud.gov
      CF_ORG: epa-surface-water
      CF_SPACE: owtbx-elg-dev
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Check npm version
          command: |
            npm --version
      - run:
          name: Check node version
          command: |
            node --version
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install npm
          command: npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      # - run: # run tests
        #  name: test
        #  command: npm test
      - run:
          name: build
          command: npm run build:prod
      # - run:
      #     name: Install Sonarqube scanner
      #     command: |
      #       cd ..
      #       wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
      #       unzip sonar-scanner-cli-3.3.0.1492-linux.zip
      # - run:
      #     name: Run Sonarqube scanner
      #     command: |
      #       cd ..
      #       ./sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner -Dsonar.projectKey=elg -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONARQUBE_TOKEN
      - run:
          name: Setup Cloud Foundry CLI
          command: |
            cd ..
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&version=v7&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.fr.cloud.gov
            cf auth "$CF_USER_DEV" "$CF_PASSWORD_DEV"
            cf target -o "$CF_ORG" -s "$CF_SPACE"
      - run:
          name: Deploy application to Cloud.gov
          command: |
            cf push $APP_NAME --strategy rolling -f ../manifest-dev.yml -p . -t 180
      - run:
          name: Set application-level variables
          command: |
            cf set-env $APP_NAME "ELG_BASIC_AUTH_USER_NAME" "$ELG_BASIC_AUTH_USER_NAME" > /dev/null
            cf set-env $APP_NAME "ELG_BASIC_AUTH_USER_PWD" "$ELG_BASIC_AUTH_USER_PWD" > /dev/null
            cf set-env $APP_NAME "ELG_GLOSSARY_AUTH" "$ELG_GLOSSARY_AUTH" > /dev/null

  stage-branch:
    working_directory: ~/project/app # directory where steps will run
    docker:
      - image: circleci/node:erbium-buster
    environment:
      APP_NAME: elg-search-tools-stage
      APP_DOMAIN: app.cloud.gov
      CF_ORG: epa-surface-water
      CF_SPACE: owtbx-elg-staging
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Check npm version
          command: |
            npm --version
      - run:
          name: Check node version
          command: |
            node --version
      - run:
          name: install npm
          command: npm install
      - run:
          name: build
          command: npm run build:prod
      - run:
          name: Setup Cloud Foundry CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&version=v7&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.fr.cloud.gov
            cf auth "$CF_USER_STAGING" "$CF_PASSWORD_STAGING"
            cf target -o "$CF_ORG" -s "$CF_SPACE"
      - run:
          name: Deploy application to Cloud.gov
          command: |
            cf push $APP_NAME --strategy rolling -f ../manifest-staging.yml -p . -t 180
            cf set-env $APP_NAME "ELG_BASIC_AUTH_USER_NAME" "$ELG_BASIC_AUTH_USER_NAME" > /dev/null
            cf set-env $APP_NAME "ELG_BASIC_AUTH_USER_PWD" "$ELG_BASIC_AUTH_USER_PWD" > /dev/null
            cf set-env $APP_NAME "ELG_GLOSSARY_AUTH" "$ELG_GLOSSARY_AUTH" > /dev/null

workflows:
  version: 2
  main:
    jobs:
      - develop-branch:
          filters:
            branches:
              only: develop
      - stage-branch:
          filters:
            branches:
              only: staging
      - master-branch:
          filters:
            branches:
              only: master
